{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_18/Desktop/Sean/React Native/goSaveMore/goSaveMore-FE/gsm-frontend/src/components/CheckOutForm.js\";\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport BillingDetailsFields from './BillingDetails';\nimport { Button } from 'react-materialize';\nimport CheckoutError from './CheckoutError';\n\nconst CheckoutForm = ({\n  totalPrice,\n  onSuccessfulCheckout\n}) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const stripe = useStripe();\n  const elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    setProcessingTo(true);\n    const cardElement = elements.getElement('card');\n\n    try {\n      const {\n        data: clientSecret\n      } = await axios.post('https://gosavemore.herokuapp.com/checkout/', {\n        amount: totalPrice * 100\n      });\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: billingDetails\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const {\n        error\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n  }; // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  const iframeStyles = {\n    base: {\n      color: '#000',\n      fontSize: '16px',\n      iconColor: '#fff',\n      '::placeholder': {\n        color: '#87bbfd'\n      }\n    },\n    invalid: {\n      iconColor: '#000',\n      color: '#000'\n    },\n    complete: {\n      iconColor: '#000'\n    }\n  };\n  const cardElementOpts = {\n    iconStyle: 'solid',\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BillingDetailsFields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }))), checkoutError && /*#__PURE__*/React.createElement(CheckoutError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, checkoutError), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: isProcessing || !stripe,\n    style: {\n      paddingTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, isProcessing ? 'Processing...' : `Pay $${totalPrice}`)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/lambda_school_loaner_18/Desktop/Sean/React Native/goSaveMore/goSaveMore-FE/gsm-frontend/src/components/CheckOutForm.js"],"names":["React","useState","CardElement","useStripe","useElements","axios","BillingDetailsFields","Button","CheckoutError","CheckoutForm","totalPrice","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","target","value","email","address","city","line1","state","postal_code","zip","cardElement","getElement","data","clientSecret","post","amount","paymentMethodReq","createPaymentMethod","type","card","billing_details","confirmCardPayment","payment_method","paymentMethod","id","err","iframeStyles","base","color","fontSize","iconColor","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode","paddingTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\nimport axios from 'axios'\n\nimport BillingDetailsFields from './BillingDetails'\nimport { Button } from 'react-materialize'\nimport CheckoutError from './CheckoutError'\n\nconst CheckoutForm = ({ totalPrice, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false)\n  const [checkoutError, setCheckoutError] = useState()\n\n  const stripe = useStripe()\n  const elements = useElements()\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = (ev) => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError()\n  }\n\n  const handleFormSubmit = async (ev) => {\n    ev.preventDefault()\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.address.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value,\n      },\n    }\n\n    setProcessingTo(true)\n\n    const cardElement = elements.getElement('card')\n\n    try {\n      const { data: clientSecret } = await axios.post(\n        'https://gosavemore.herokuapp.com/checkout/',\n        {\n          amount: totalPrice * 100,\n        }\n      )\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: billingDetails,\n      })\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message)\n        setProcessingTo(false)\n        return\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id,\n      })\n\n      if (error) {\n        setCheckoutError(error.message)\n        setProcessingTo(false)\n        return\n      }\n\n      onSuccessfulCheckout()\n    } catch (err) {\n      setCheckoutError(err.message)\n    }\n  }\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      color: '#000',\n      fontSize: '16px',\n      iconColor: '#fff',\n      '::placeholder': {\n        color: '#87bbfd',\n      },\n    },\n    invalid: {\n      iconColor: '#000',\n      color: '#000',\n    },\n    complete: {\n      iconColor: '#000',\n    },\n  }\n\n  const cardElementOpts = {\n    iconStyle: 'solid',\n    style: iframeStyles,\n    hidePostalCode: true,\n  }\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <div>\n        <BillingDetailsFields />\n      </div>\n      <div>\n        <div>\n          <CardElement\n            options={cardElementOpts}\n            onChange={handleCardDetailsChange}\n          />\n        </div>\n      </div>\n      {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n      <div>\n        {/* TIP always disable your submit button while processing payments */}\n        <Button\n          disabled={isProcessing || !stripe}\n          style={{\n            paddingTop: '20px',\n          }}\n        >\n          {isProcessing ? 'Processing...' : `Pay $${totalPrice}`}\n        </Button>\n      </div>\n    </form>\n  )\n}\n\nexport default CheckoutForm\n"]},"metadata":{},"sourceType":"module"}